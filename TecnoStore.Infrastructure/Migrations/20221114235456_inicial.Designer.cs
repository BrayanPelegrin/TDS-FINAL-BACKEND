// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TecnoStore.Infrastructure.Data;

#nullable disable

namespace TecnoStore.Infrastructure.Migrations
{
    [DbContext(typeof(TecnoStoreContext))]
    [Migration("20221114235456_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Categorias", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Accesorios",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(1977),
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Laptops",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(1979),
                            UsuarioCreo = "Admin"
                        });
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioCreo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estados", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Activo",
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(5077),
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Eliminado",
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(5082),
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Agotado",
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(5083),
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Descontinuado",
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(5084),
                            UsuarioCreo = "Admin"
                        });
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.IdentityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioCreo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Productos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 1,
                            Descripcion = "Longitud 25cm",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7687),
                            Nombre = "Cable Tipo C",
                            Precio = 250m,
                            Stock = 30,
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Descripcion = "40 horas de reproduccion continua, Audio 8D, BassBost",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7692),
                            Nombre = "Beats Solo3 Wiriless",
                            Precio = 7849.99m,
                            Stock = 10,
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 1,
                            Descripcion = "Mouse inalámbrico con sensor óptico DPI de entrada más rápida",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7694),
                            Nombre = "Razer Gaming Viper",
                            Precio = 1249.99m,
                            Stock = 25,
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 2,
                            Descripcion = "chip Apple M1, pantalla Retina de 13 pulgadas, 8 GB de RAM, almacenamiento SSD de 256 GB",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7696),
                            Nombre = "Apple MacBook Air 2020",
                            Precio = 1249.99m,
                            Stock = 25,
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 2,
                            Descripcion = "FHD de 15.6 pulgadas 144Hz, Intel 10-Core i7-12650H, GeForce RTX 3070, DDR5 de 32 GB, SSD PCIe de 1 TB",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7698),
                            Nombre = "ASUS TUF Dash F15 2022",
                            Precio = 79999.99m,
                            Stock = 25,
                            UsuarioCreo = "Admin"
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 2,
                            Descripcion = "Pantalla táctil, pantalla UHD+ de 13.4 pulgadas, delgada y ligera, Intel Core i7-1195G7, 16GB LPDDR4x RAM, 512GB SSD",
                            EstadoId = 1,
                            FechaCreo = new DateTime(2022, 11, 14, 19, 54, 56, 717, DateTimeKind.Local).AddTicks(7700),
                            Nombre = "Dell Laptop XPS 13 9310",
                            Precio = 66729.99m,
                            Stock = 25,
                            UsuarioCreo = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TecnoStore.Core.Entities.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TecnoStore.Core.Entities.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TecnoStore.Core.Entities.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TecnoStore.Core.Entities.IdentityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Categoria", b =>
                {
                    b.HasOne("TecnoStore.Core.Entities.Estado", "Estado")
                        .WithMany("Categorias")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Producto", b =>
                {
                    b.HasOne("TecnoStore.Core.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Productos_Categorias_CategoriaId");

                    b.HasOne("TecnoStore.Core.Entities.Estado", "Estado")
                        .WithMany("Productos")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("TecnoStore.Core.Entities.Estado", b =>
                {
                    b.Navigation("Categorias");

                    b.Navigation("Productos");
                });
#pragma warning restore 612, 618
        }
    }
}
